from telebot import types
from constans import *
from copy import deepcopy


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@bot.message_handler(commands = ['start'])
def start_command(message: types.Message):    
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, *{message.from_user.full_name}*! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=GLOBAL_MENU)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ —Å–æ—Ü—Å–µ—Ç—è—Ö
def social_response(message: types.Message):
    bot.reply_to(message, "–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏:", reply_markup=SOCIAL_MENU)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ –∫—É—Ä—Å–∞—Ö
def choose_course_version_response(message):
    bot.reply_to(message, "–ö–∞–∫—É—é –≤–µ—Ä—Å–∏—é –≤—ã–±–∏—Ä–∞–µ—Ç–µ?\n*–ü—Ä–æ–±–Ω–∞—è –≤–µ—Ä—Å–∏—è* - —ç—Ç–æ –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –ø–æ–ª–æ–≤–∏–Ω–µ –∫—É—Ä—Å–æ–≤\n*–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è* - —ç—Ç–æ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É –∫—É—Ä—Å—É", reply_markup=VERSIONS)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ –±–æ—Ç–µ
def about_bot_response(message: types.Message):
    bot.reply_to(message, ABOUT_BOT)


# –ü–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
def full_version_response(message: types.Message):
    if not db.isPurchased(message.from_user.id):
        bot.send_invoice(message.chat.id, title="–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É", description="–î–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –≤–∞–º –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å–∞–º",
                        invoice_payload=f"fullversion_{message.from_user.id}", currency="RUB", provider_token=PAYLOAD_TOKEN,
                        prices=[types.LabeledPrice("–ü–æ–¥–ø–∏—Å–∫–∞", PRICE * 100)], reply_to_message_id=message.id
        )
    else:
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É üíñ. –£ –≤–∞—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —è–∑—ã–∫–æ–≤
def language_response(message: types.Message, language_markup: types.InlineKeyboardMarkup):
    if db.isPurchased(message.from_user.id):
        bot.reply_to(message, "–£ –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç—ã –≤—Å–µ —Å—Å—ã–ª–∫–∏ :)\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É üíñ.", reply_markup=language_markup)
    else:
        not_full = types.InlineKeyboardMarkup(keyboard=[[language_markup.keyboard[0][0]]])
        for i in range(1, len(language_markup.keyboard[0])):
            not_full.keyboard[0].append(types.InlineKeyboardButton(f"‚ùå {language_markup.keyboard[0][i].text}", callback_data="need_subscription"))
        bot.reply_to(message, "–£ –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç—ã –Ω–µ –≤—Å–µ —Å—Å—ã–ª–∫–∏ :(\n–î–ª—è –∏—Ö –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=not_full)

# –ú–µ–Ω—é –∫—É—Ä—Å–∞
def course_response(message: types.Message):
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=LANGUAGES_MENU)


# –û–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
def return_response(message: types.Message):
    bot.reply_to(message, "–í–æ–∑—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=GLOBAL_MENU)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(content_types = ['text'])
def button_handler(message: types.Message):
    if message.text == 'üìÉ –û –±–æ—Ç–µ':
        about_bot_response(message)
    elif message.text == 'üìà –ö—É—Ä—Å—ã':
        choose_course_version_response(message)
    elif message.text == 'üåê –°–æ—Ü–°–µ—Ç–∏':
        social_response(message) 
    elif message.text == 'ü™ô –ü–æ–¥–ø–∏—Å–∫–∞':
        full_version_response(message)
    elif message.text == '‚úèÔ∏è –ö—É—Ä—Å':
        course_response(message)
    elif message.text == 'üíª C#':
        language_response(message, CSHARP_RESOURCES)
    elif message.text == 'üíª Javascript':
        language_response(message, JAVASCRIPT_RESOURCES)
    elif message.text == 'üíª Python':
        language_response(message, PYTHON_RESOURCES)
    elif message.text == '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        return_response(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@bot.message_handler(content_types=['successful_payment'])
def successful_payment(message: types.Message):
    # TEST print
    payment = message.successful_payment
    print(payment.currency, payment.order_info, payment.invoice_payload, payment.total_amount, payment.telegram_payment_charge_id, payment.provider_payment_charge_id, payment.shipping_option_id, sep='\n')
    if not db.isPurchased(message.from_user.id):
        db.insertUser(message.from_user.id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞
@bot.callback_query_handler(func=lambda _: True)
def subscription_suggestion(call: types.CallbackQuery):
    if call.data == "need_subscription":
        full_version_response(call.message)


bot.infinity_polling()
