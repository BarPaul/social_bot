from dotenv import load_dotenv, find_dotenv
from telebot import TeleBot, types
from typing import Final
from database import Database
from os import getenv


load_dotenv(find_dotenv())
TOKEN: Final = getenv("TOKEN")
YOUTUBE, VK, TIKTOK, TG, DISCORD = getenv("YOUTUBE_LINK"), getenv("VK_LINK"), getenv("TIKTOK_LINK"), getenv("TG_LINK"), getenv("DISCORD_LINK")
bot = TeleBot(TOKEN, parse_mode="markdown")
db = Database()


VERSIONS = GLOBAL_MENU = types.ReplyKeyboardMarkup(resize_keyboard=True)
for btn in ('üìà –ö—É—Ä—Å—ã', 'üåê –°–æ—Ü–°–µ—Ç–∏', 'üìÉ –û –±–æ—Ç–µ'):
    GLOBAL_MENU.add(btn)

SOCIAL_MENU = types.InlineKeyboardMarkup()
SOCIAL_MENU.add(types.InlineKeyboardButton(text="YouTube", url=YOUTUBE))
SOCIAL_MENU.add(types.InlineKeyboardButton(text="VK", url=VK))
SOCIAL_MENU.add(types.InlineKeyboardButton(text="TikTok", url=TIKTOK))
SOCIAL_MENU.add(types.InlineKeyboardButton(text="Telegram", url=TG))
SOCIAL_MENU.add(types.InlineKeyboardButton(text="Discord", url=DISCORD))

for btn in ('üìí –ü–æ–ª–Ω–∞—è', '‚úèÔ∏è –ü—Ä–æ–±–Ω–∞—è', '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è'):
    VERSIONS.add(btn)

PRICE = getenv("FULL_PRICE")
PAYLOAD_TOKEN = getenv("PAYLOAD_TOKEN")

ABOUT_BOT = """*Learning Program* - –ø—Ä–æ–µ–∫—Ç –ø–æ –æ–±—É—á–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —É–∑–Ω–∞–µ—Ç–µ –æ—Å–Ω–æ–≤—ã —è–∑—ã–∫–æ–≤:
*–°#*, *Python* –∏ *JavaScript*, –∞ —Ç–∞–∫–∂–µ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏. –í –±—É–¥—É—â–µ–º –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–æ–≤—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏.
–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –Ω–µ–¥–æ—á–µ—Ç –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö. –ë—É–¥–µ–º —Ä–∞–¥—ã –ª—é–±–æ–º—É —Ñ–∏–¥–±–µ–∫—É :)
¬©Ô∏è *NorthStartStudio*"""


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@bot.message_handler(commands = ['start'])
def start_command(message: types.Message):    
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, *{message.from_user.full_name}*! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=GLOBAL_MENU)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ —Å–æ—Ü—Å–µ—Ç—è—Ö
def social_response(message: types.Message):
    bot.reply_to(message, "–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏:", reply_markup=SOCIAL_MENU)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ –∫—É—Ä—Å–∞—Ö
def course_response(message):
    bot.reply_to(message, "–ö–∞–∫—É—é –≤–µ—Ä—Å–∏—é –≤—ã–±–∏—Ä–∞–µ—Ç–µ?\n*–ü—Ä–æ–±–Ω–∞—è –≤–µ—Ä—Å–∏—è* - —ç—Ç–æ –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –ø–æ–ª–æ–≤–∏–Ω–µ –∫—É—Ä—Å–æ–≤\n*–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è* - —ç—Ç–æ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É –∫—É—Ä—Å—É", reply_markup=VERSIONS)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ –±–æ—Ç–µ
def about_bot_response(message: types.Message):
    bot.reply_to(message, ABOUT_BOT)


# –ü–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
def full_version_response(message: types.Message):
    if db.isPurchased(message.from_user.id):
        bot.send_invoice(message.chat.id, title="–û–ø–ª–∞—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", description="–î–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –≤–∞–º –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å–∞–º",
                        invoice_payload=f"fullversion_{message.from_user.id}", currency="RUB", provider_token=PAYLOAD_TOKEN,
                        prices=[types.LabeledPrice("–ü–æ–¥–ø–∏—Å–∫–∞", PRICE * 100)], reply_to_message_id=message.id
        )
    else:
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞ :)")


# –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
def trial_version_response(message: types.Message):
    bot.reply_to(message, "Under construction")


# –û–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
def return_response(message: types.Message):
    bot.reply_to(message, "–í–æ–∑—Ä–∞—â–∞–µ–º—Å—è :)", reply_markup=GLOBAL_MENU)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(content_types = ['text'])
def button_handler(message: types.Message):
    if message.text == 'üìÉ –û –±–æ—Ç–µ':
        about_bot_response(message)
    elif message.text == 'üìà –ö—É—Ä—Å—ã':
        course_response(message)
    elif message.text == 'üåê –°–æ—Ü–°–µ—Ç–∏':
        social_response(message) 
    elif message.text == 'üìí –ü–æ–ª–Ω–∞—è':
        full_version_response(message)
    elif message.text == '‚úèÔ∏è –ü—Ä–æ–±–Ω–∞—è':
        trial_version_response(message)
    elif message.text == '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        return_response(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@bot.message_handler(content_types=['successful_payment'])
def successful_payment(message: types.Message):
    if not db.isPurchased(message.from_user.id):
        db.insertUser(message.from_user.id)


bot.infinity_polling()
