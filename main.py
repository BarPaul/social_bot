from constants import *
from logger import logger


@bot.message_handler(commands = ['start'])
def start_command(message: types.Message):
    logger.debug(f"{message.from_user.full_name} ({message.from_user.id}) –≤–≤–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—É /start")
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, *{message.from_user.full_name}*! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=GLOBAL_MENU)


@bot.message_handler(func=lambda message: message.text == 'üåê –°–æ—Ü–°–µ—Ç–∏')
def social_response(message: types.Message):
    logger.debug(f"{message.from_user.full_name} ({message.from_user.id}) –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π")
    bot.reply_to(message, "–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏:", reply_markup=SOCIAL_MENU)


@bot.message_handler(func=lambda message: message.text == 'üìà –ö—É—Ä—Å—ã')
def choose_course_version_response(message):
    logger.debug(f"{message.from_user.full_name} ({message.from_user.id}) –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤")
    bot.reply_to(message, "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–∞–º, –µ—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –∫—É—Ä—Å–∞ –±—É–¥–µ—Ç –¥–ª—è –≤–∞—Å –∑–∞–∫—Ä—ã—Ç–∞\n–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫—É—Ä—Å—É + –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É :)", reply_markup=VERSIONS)


@bot.message_handler(func=lambda message: message.text == 'üìÉ –û –±–æ—Ç–µ')
def about_bot_response(message: types.Message):
    logger.debug(f"{message.from_user.full_name} ({message.from_user.id}) –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
    bot.reply_to(message, ABOUT_BOT)


@bot.message_handler(func=lambda message: message.text == 'ü™ô –ü–æ–¥–ø–∏—Å–∫–∞')
def full_version_response(message: types.Message):
    if not db.isPurchased(message.from_user.id):
        logger.info(f"{message.from_user.full_name} ({message.from_user.id}) –Ω–∞–º–µ—Ä–µ–≤–∞–µ—Ç –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
        bot.send_invoice(message.chat.id, title="–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É", description="–î–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –≤–∞–º –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å–∞–º",
                        invoice_payload=f"fullversion_{message.from_user.id}", currency="RUB", provider_token=PAYLOAD_TOKEN,
                        prices=[types.LabeledPrice("–ü–æ–¥–ø–∏—Å–∫–∞", PRICE * 100)], reply_to_message_id=message.id
        )
    else:
        logger.debug(f"{message.from_user.full_name} ({message.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –µ—â–µ —Ä–∞–∑ –Ω–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å")
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É üíñ. –£ –≤–∞—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è")


@bot.message_handler(func=lambda message: message.text in LANGUAGES.keys())
def language_response(message: types.Message):
    logger.debug(f"{message.from_user.full_name} ({message.from_user.id}) –≤—ã–±—Ä–∞–ª —è–∑—ã–∫ {message.text} –¥–ª—è –∫—É—Ä—Å–∞")
    if db.isPurchased(message.from_user.id):
        return bot.reply_to(message, "–£ –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç—ã –≤—Å–µ —Å—Å—ã–ª–∫–∏ :)\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É üíñ", reply_markup=LANGUAGES[message.text])
    not_full = types.InlineKeyboardMarkup(keyboard=[[LANGUAGES[message.text].keyboard[0][0]]])
    for i in range(1, len(LANGUAGES[message.text].keyboard[0])):
        not_full.keyboard[0].append(types.InlineKeyboardButton(f"‚ùå {LANGUAGES[message.text].keyboard[0][i].text}", callback_data="need_subscription"))
    bot.reply_to(message, "–£ –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç—ã –Ω–µ –≤—Å–µ —Å—Å—ã–ª–∫–∏ :(\n–î–ª—è –∏—Ö –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=not_full)


@bot.message_handler(func=lambda message: message.text == '‚úèÔ∏è –ö—É—Ä—Å')
def course_response(message: types.Message):
    logger.debug(f"{message.from_user.full_name} ({message.from_user.id}) –≤—ã–±–∏—Ä–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è –∫—É—Ä—Å–∞")
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=LANGUAGES_MENU)


@bot.message_handler(func=lambda message: message.text == '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è')
def return_response(message: types.Message):
    logger.debug(f"{message.from_user.full_name} ({message.from_user.id}) –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.reply_to(message, "–í–æ–∑—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=GLOBAL_MENU)


@bot.message_handler(content_types=['successful_payment'])
def successful_payment(message: types.Message):
    # TEST print
    payment = message.successful_payment
    print(payment.currency, payment.order_info, payment.invoice_payload, payment.total_amount, payment.telegram_payment_charge_id, payment.provider_payment_charge_id, payment.shipping_option_id, sep='\n')
    try:
        if not db.isPurchased(message.from_user.id):
            db.insertUser(message.from_user.id)
        logger.warning(f"{message.from_user.full_name} ({message.from_user.id}) –ø—Ä–∏–æ–±—Ä–µ–ª –ø–æ–¥–ø–∏—Å–∫—É! üü¢")
    except Exception as e:
        logger.error(f"{message.from_user.full_name} ({message.from_user.id}) –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏\n{e}")


@bot.callback_query_handler(func=lambda call: call.data == "need_subscription")
def subscription_suggestion(call: types.CallbackQuery):
    full_version_response(call.message)


bot.infinity_polling(0)
